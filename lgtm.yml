##########################################################################################
# Customize file classifications.                                                        #
# Results from files under any classifier will be excluded from LGTM                     #
# statistics.                                                                            #
##########################################################################################

##########################################################################################
# Use the `path_classifiers` block to define changes to the default classification of    #
# files.                                                                                 #
##########################################################################################

path_classifiers:
  test:
    # Override LGTM's default classification of test files by excluding all files.
    - exclude: /
    # Classify all files in the top-level directories test/ and testsuites/ as test code.
    - tests
    # Classify all files with suffix `.test` as test code.
    #        Note: use only forward slash / as a path separator.
    #        Use ** to indicate an arbitrary parent path.
    #        Use * to indicate any sequence of characters excluding /.
    #        Always enclose the expression in double quotes if it includes *.
    # - "**/*.test"
    # Refine the classifications above by excluding files in test/util/.
    - exclude: tests/integration
  # The default behavior is to tag all files created during the
  # build as `generated`. Results are hidden for generated code. You can tag 
  # further files as being generated by adding them to the `generated` section.

#########################################################################################
# Use the extraction block to define changes to the default code extraction process     #
# for one or more languages. The settings for each language are defined in a child      #
# block, with one or more steps.                                                        #
#########################################################################################

extraction: 
  # Define settings for C# analysis
  ##################################
  csharp:
    # The `prepare` step exists for customization on LGTM.com only.
    # prepare:
    #   packages:
    #     - example_package
    # Add an `after-prepare` step if you need to run commands after the `prepare` step.
    # Each command should be listed on a separate line.
    after_prepare:
      - export PATH=$LGTM_WORKSPACE/tools:$PATH
    # The `index` step builds the code and extracts information during the build
    # process.
    index:
      # Specify that all project or solution files should be used for extraction.
      # Default: false.
      all_solutions: false
      # Specify a list of one or more project or solution files for extraction.
      # Default: LGTM chooses the file closest to the root of the repository (this may
      # fail if there are multiple candidates).
      solution: 
        - NetDaemon.sln
      # Override the autobuild process by specifying a list of custom build commands
      # to use instead. 
      # build_command:
        # - dotnet ./example-compile-all.sh
      # Specify .NET Core settings.
      dotnet:
        # Specify additional arguments to `dotnet build`.
        # Default: empty.
        arguments: "example_arg"
        # Specify the version of .NET Core SDK to use.
        # Default: The version installed on the build machine.
        version: 5

      # Specify whether or not to perform a NuGet restore for extraction. Default: true.
      nuget_restore: true

